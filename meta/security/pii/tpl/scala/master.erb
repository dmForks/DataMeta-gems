package <%= namespace %>

/*
****************  This file is generated by DataMeta; do not edit manually!!
*/

/**
* The encapsulation of the version <%= reg.ver %> the Abstract PII definition.
*/
object <%= className %> {

<% reg.keyVos.keys.sort.each { |k| fldName = k.to_s.inspect; %>
  val <%= k.to_s %> = <%=fldName%>
<%}%>

  /**
   * Impact Levels:
   */
  object Level extends Enumeration {
<%= codeIndent * 2 %>val <%= ALL_IMPACTS.map{|i| i.to_s.upcase}.join(', ') %> = Value
  }

  case class Def(key: String, level: Level.Value, props: Map[String, String])

  val Defs = Map(
<% flds = reg.keyVos.keys.sort; flds.each_with_index { |kf, fix| fldName = kf.to_s; fldDef = reg.keyVos[kf] %>
    <%= fldName %> -> Def(<%=fldName%>, Level.<%= fldDef.level.to_s.upcase %>, Map(<% attrs = fldDef.attrs.keys.reject{|ka| ka == 'level'}.sort; attrs.each_with_index {|ka, aix| keyStr = ka.to_s.inspect; valStr = fldDef.attrs[ka].inspect %>
      <%=keyStr%> -> <%=valStr%><%=aix == attrs.size - 1 ? '' : ','%><%}%>))<%=fix == flds.size - 1 ? '' : ','%>
<% } %>
  )
}
